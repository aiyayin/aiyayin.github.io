{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"source/images/LayoutInflater.png","path":"images/LayoutInflater.png","modified":1,"renderable":0},{"_id":"source/video/SwaggerFormat.mp4","path":"video/SwaggerFormat.mp4","modified":1,"renderable":0},{"_id":"source/images/红黑树.png","path":"images/红黑树.png","modified":1,"renderable":0},{"_id":"themes/maupassant/source/css/copycode.css","path":"css/copycode.css","modified":1,"renderable":1},{"_id":"themes/maupassant/source/css/copyright.css","path":"css/copyright.css","modified":1,"renderable":1},{"_id":"themes/maupassant/source/css/dark.css","path":"css/dark.css","modified":1,"renderable":1},{"_id":"themes/maupassant/source/css/donate.css","path":"css/donate.css","modified":1,"renderable":1},{"_id":"themes/maupassant/source/css/search.css","path":"css/search.css","modified":1,"renderable":1},{"_id":"themes/maupassant/source/img/alipay.svg","path":"img/alipay.svg","modified":1,"renderable":1},{"_id":"themes/maupassant/source/css/style.scss","path":"css/style.scss","modified":1,"renderable":1},{"_id":"themes/maupassant/source/img/bitcoin.svg","path":"img/bitcoin.svg","modified":1,"renderable":1},{"_id":"themes/maupassant/source/img/github.svg","path":"img/github.svg","modified":1,"renderable":1},{"_id":"themes/maupassant/source/img/like.svg","path":"img/like.svg","modified":1,"renderable":1},{"_id":"themes/maupassant/source/img/paypal.svg","path":"img/paypal.svg","modified":1,"renderable":1},{"_id":"themes/maupassant/source/img/wechat.svg","path":"img/wechat.svg","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","path":"js/codeblock-resizer.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/copycode.js","path":"js/copycode.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/copyright.js","path":"js/copyright.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/donate.js","path":"js/donate.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/fancybox.js","path":"js/fancybox.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/love.js","path":"js/love.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/share.js","path":"js/share.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/totop.js","path":"js/totop.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/smartresize.js","path":"js/smartresize.js","modified":1,"renderable":1},{"_id":"source/video/YapiFormat.mp4","path":"video/YapiFormat.mp4","modified":1,"renderable":0},{"_id":"source/images/gradle.png","path":"images/gradle.png","modified":1,"renderable":0},{"_id":"source/images/YapiFormat.gif","path":"images/YapiFormat.gif","modified":1,"renderable":0},{"_id":"source/images/SwaggerFormat.gif","path":"images/SwaggerFormat.gif","modified":1,"renderable":0},{"_id":"source/images/volley.png","path":"images/volley.png","modified":1,"renderable":0}],"Cache":[{"_id":"themes/maupassant/.gitignore","hash":"d7d27e5a9bcffe7f90dc2f4f0752e19020e40f40","modified":1586931581029},{"_id":"themes/maupassant/.travis.yml","hash":"f8da426b97088e4caa5226cff219a5d95087961f","modified":1586931581030},{"_id":"themes/maupassant/LICENSE","hash":"0663fd3a7ea9fc4f4c634b4d73e2da426b536f86","modified":1586931581032},{"_id":"themes/maupassant/README.md","hash":"6b1947584d9f80b15e530e4cea274463bbebc042","modified":1586931581032},{"_id":"themes/maupassant/_config.yml","hash":"3d58de7eb16668b3f8e5229a55b38c85aefe518b","modified":1587111983600},{"_id":"themes/maupassant/package.json","hash":"5328c4c435cd4a5fe47caae31b9975013cdca5bb","modified":1586931581074},{"_id":"source/_posts/日志.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1588821134014},{"_id":"source/_posts/Activity.md","hash":"b48fc677658768fbb5c3847241c18f70b0204b62","modified":1591435521843},{"_id":"source/_posts/IDEA Plugin.md","hash":"5cc6a28edb58cd566a3be8c5b62c61b776b103ac","modified":1594024089621},{"_id":"source/_posts/View 绘制.md","hash":"870e54899e79a84aaee7002164ddf318d2f0f443","modified":1588239039808},{"_id":"source/_posts/as项目中的gradle.md","hash":"4f6999074e77b0ab4f226cb92149743e453357d7","modified":1587449305411},{"_id":"source/_posts/parcelable.md","hash":"cb84e628ce763166e0efa8af0cfa65a4d7745cf8","modified":1587544737426},{"_id":"source/_posts/三种动画，插值器，估值器.md","hash":"86a9237f1020f4faae20d33536e82796de612d8a","modified":1587449262757},{"_id":"source/_posts/volley.md","hash":"810d1fdc779f30c3d2cdd3849575b7814d870544","modified":1594021511644},{"_id":"themes/maupassant/layout/archive.pug","hash":"05f751cb766616ff96ff22ad0790d9cd28777270","modified":1586931581064},{"_id":"themes/maupassant/layout/base-without-sidebar.pug","hash":"b0a0ec63ee0225eaa0996d72164202bc9a28a225","modified":1586931581065},{"_id":"themes/maupassant/layout/base.pug","hash":"7451a590db6943edc099dc0e13b317c38686e8fc","modified":1586931581066},{"_id":"themes/maupassant/layout/index.pug","hash":"d1d56fa62f1293cd0cbefe96dbbde2d35b557a0a","modified":1586931581068},{"_id":"themes/maupassant/layout/page.pug","hash":"647bfba2208cbef052e1bf307d30a6775671215d","modified":1586931581069},{"_id":"themes/maupassant/layout/post.pug","hash":"4140dc1dc9c777f4fc1d361f313f5d898d146e7a","modified":1586931581070},{"_id":"themes/maupassant/layout/single-column.pug","hash":"8b4b731cdf86379d526821a1fa950bf15ed61f15","modified":1586931581071},{"_id":"themes/maupassant/layout/tagcloud.pug","hash":"9ad3083c2f70fdb460ecbe277be97320a2621196","modified":1586931581072},{"_id":"themes/maupassant/layout/timeline.pug","hash":"04f7efdc45acda1faff409d0f80fa5a0dd2309d0","modified":1586931581073},{"_id":"themes/maupassant/languages/de-DE.yml","hash":"25d1d8cd8113045a7603c14af1ea1539fc6456ed","modified":1586931581035},{"_id":"themes/maupassant/languages/en.yml","hash":"93674c5df281d7f5647fe500e10924008d8017c6","modified":1586931581036},{"_id":"themes/maupassant/languages/es-ES.yml","hash":"3cc9312fbdba4a8f8e8254804121e4724c719bcc","modified":1586931581037},{"_id":"themes/maupassant/languages/fr-FR.yml","hash":"3a50568f200b9c1258415b53727e42c6b6c7ea0b","modified":1586931581038},{"_id":"themes/maupassant/languages/ru.yml","hash":"36edc014c6aaef367d58929089bf7915375e71a6","modified":1586931581040},{"_id":"themes/maupassant/languages/zh-CN.yml","hash":"a6fa4ea6c3a59ae6ac13230d6154d1fdd6c149f3","modified":1586931581041},{"_id":"themes/maupassant/languages/ko.yml","hash":"a454bcec60113507bc1d593a699849822386c196","modified":1586931581039},{"_id":"themes/maupassant/languages/zh-TW.yml","hash":"34dba7ac67aeb316f629ca73e546fa143cc362d5","modified":1586931581042},{"_id":"source/images/LayoutInflater.png","hash":"2bcb3cb9dc7d17749cce108ba31ae7daa20f151b","modified":1591435092430},{"_id":"source/video/SwaggerFormat.mp4","hash":"86cf4781bd6531c78eb342cf6472e65b2706a6e8","modified":1594016391104},{"_id":"source/images/红黑树.png","hash":"dcb969c8a373947c17c9e3d89f7a0b627dd52e61","modified":1568189314294},{"_id":"themes/maupassant/layout/_partial/comments.pug","hash":"2701ce8ecff183d3ecdef3af6528cb1d4e6404e1","modified":1586931581045},{"_id":"themes/maupassant/layout/_partial/after_footer.pug","hash":"a3951bb9f04b8e1ea7413a37bcc1768e84349bdb","modified":1586931581044},{"_id":"themes/maupassant/layout/_partial/head.pug","hash":"4d1deaaf91c9c4e6747719d908b6506ca19c9a30","modified":1586931581047},{"_id":"themes/maupassant/layout/_partial/footer.pug","hash":"92aa15e813bfb411803cc54218feb5410469a9c2","modified":1586931581046},{"_id":"themes/maupassant/layout/_partial/helpers.pug","hash":"9e44f6d32f2449b4109c33118f8285fa2fc7b023","modified":1586931581048},{"_id":"themes/maupassant/layout/_partial/mathjax.pug","hash":"ac6e3a92bf18ab6bbd0e041b6796b295bae963ee","modified":1586931581049},{"_id":"themes/maupassant/layout/_partial/mathjax2.pug","hash":"234a792e64ba208fa97d2f99772ece23056a53ec","modified":1586931581050},{"_id":"themes/maupassant/layout/_partial/paginator.pug","hash":"03ad0c49ae6f8a999ae35b38d08e25775f51f52a","modified":1586931581051},{"_id":"themes/maupassant/layout/_partial/tag.pug","hash":"a255fca3557a0dac0ad49c7d4456133420c22bd8","modified":1586931581053},{"_id":"themes/maupassant/layout/_partial/post_nav.pug","hash":"b11d9e6000449838b17f508429f29ffb60f53096","modified":1586931581052},{"_id":"themes/maupassant/layout/_partial/totop.pug","hash":"eb91a3baf9411188c7c8130f63a674f541ca9c81","modified":1586931581054},{"_id":"themes/maupassant/layout/_partial/wordcount.pug","hash":"f848b6ac3f44cfd4110a2d1c742c73eacd6285ee","modified":1586931581055},{"_id":"themes/maupassant/layout/_widget/category.pug","hash":"7707b4c718a935882ee986d0bb0078e50cdbea64","modified":1586931581057},{"_id":"themes/maupassant/layout/_widget/donate.pug","hash":"666a89edbc1d7186afba68e0b3bee7e957d7a26e","modified":1586931581059},{"_id":"themes/maupassant/layout/_widget/copyright.pug","hash":"44935b31e7b3b6232a9a587775cfe9e90efc6a89","modified":1586931581058},{"_id":"themes/maupassant/layout/_widget/links.pug","hash":"7bc7c17cfd498c3e0c3371cef78f08f1dc25db36","modified":1586931581060},{"_id":"themes/maupassant/layout/_widget/recent_comments.pug","hash":"68bae3eb2f80e6127e03faa7ee1b78fb2e70aafc","modified":1586931581061},{"_id":"themes/maupassant/layout/_widget/search.pug","hash":"6aa743486f282545f553a4fad6aae037afe26108","modified":1586931581062},{"_id":"themes/maupassant/layout/_widget/recent_posts.pug","hash":"770b6c41cbf7969ed33adf87eec3be6f50a0911b","modified":1586931581061},{"_id":"themes/maupassant/layout/_widget/tag.pug","hash":"37f236365b153fc40324391e5a602d6d50014e18","modified":1586931581063},{"_id":"themes/maupassant/source/css/copycode.css","hash":"23fefb18f1d4dc7bde33e29d6ae737570277d943","modified":1586931581076},{"_id":"themes/maupassant/source/css/copyright.css","hash":"ad420043e1d0518bfbf3b2a2d87fb5b104587c6f","modified":1586931581077},{"_id":"themes/maupassant/source/css/dark.css","hash":"87f0d84e736c55b2889d6e95025add032ceb0e06","modified":1586931581078},{"_id":"themes/maupassant/source/css/donate.css","hash":"d9ef1520e136198c0ae13acef7da22a275fb4dbf","modified":1586931581079},{"_id":"themes/maupassant/source/css/search.css","hash":"a1720a63170ff4ae9048f634e8e1900e7a3cc45a","modified":1586931581080},{"_id":"themes/maupassant/source/img/alipay.svg","hash":"3d94d2f9b09e352802628c9225578e1086f5fef3","modified":1586931581084},{"_id":"themes/maupassant/source/css/style.scss","hash":"0250383e45d3a5ce307cb3a689412c3a9f83b732","modified":1586931581082},{"_id":"themes/maupassant/source/img/bitcoin.svg","hash":"590b6b6462896168d08b30dfe2de5f08950d5553","modified":1586931581085},{"_id":"themes/maupassant/source/img/github.svg","hash":"277798d16cb6106e45ef74f6b9972011fa43401b","modified":1586931581086},{"_id":"themes/maupassant/source/img/like.svg","hash":"e6e4bd1af076be9358316cac89efdc22ef4a5064","modified":1586931581087},{"_id":"themes/maupassant/source/img/paypal.svg","hash":"09786c983a10bc570dcd05b87cec601e9d01eb00","modified":1586931581088},{"_id":"themes/maupassant/source/img/wechat.svg","hash":"19c1f68ec8c0b8e9f7855e7a6e78077f70a1aedc","modified":1586931581089},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","hash":"c77270e684a60babc1abb7353e700ecdc5a66d30","modified":1586931581091},{"_id":"themes/maupassant/source/js/copycode.js","hash":"6df3139581744e7bcd47243e4587f5397c2a24c3","modified":1586931581092},{"_id":"themes/maupassant/source/js/copyright.js","hash":"0e9a845ae05d2f00721ff6ee910c8c3cace26043","modified":1586931581093},{"_id":"themes/maupassant/source/js/donate.js","hash":"82f06bd69782c1138c98b4276771a41e3a54c061","modified":1586931581094},{"_id":"themes/maupassant/source/js/fancybox.js","hash":"8a993c1c4ad40789d2960b682cb2130382a0f26a","modified":1586931581095},{"_id":"themes/maupassant/source/js/love.js","hash":"60df5dc3d09c8f33d1d02f54cbc73bf8d62f52fb","modified":1586931581096},{"_id":"themes/maupassant/source/js/search.js","hash":"dbda07a03e6edc73f1dc28a068c24a6037b97b56","modified":1586931581099},{"_id":"themes/maupassant/source/js/share.js","hash":"514e726c1efae9f6566600fa0e945b4b9e620f2e","modified":1586931581100},{"_id":"themes/maupassant/source/js/totop.js","hash":"15de186b089c245fe60766d509b587919f05ff23","modified":1586931581103},{"_id":"themes/maupassant/source/js/smartresize.js","hash":"150ab1cad40d7ae081b0896b13f7d7cbac4e6338","modified":1586931581101},{"_id":"source/video/YapiFormat.mp4","hash":"9dd816ec78a3350c7fe1e2cd0190806ebeaa9d66","modified":1594016760111},{"_id":"source/images/gradle.png","hash":"a62f80be51a89926566ab1fcc24a53cd3751ee5a","modified":1587116897980},{"_id":"source/images/YapiFormat.gif","hash":"579a904a5395296f82d6e79e5def034a29841519","modified":1594021089422},{"_id":"source/images/SwaggerFormat.gif","hash":"cf4bbba016d375b0a390c7b7ed6bdf4b949f3883","modified":1594021384311},{"_id":"source/images/volley.png","hash":"908cea454281f52eaeb27a8df4c3bde6f32d1415","modified":1587108244358},{"_id":"public/2020/IDEA Plugin/index.html","hash":"e53328ce6a15db53105a02952f28b555f3a0e1e1","modified":1594024149455},{"_id":"public/2020/Activity/index.html","hash":"f3b02811e7ad47433108576ca3e00aac8bcf3905","modified":1594024149455},{"_id":"public/2020/日志/index.html","hash":"d7a684650356a96754b94ff5a2a949a36872ea10","modified":1594024149455},{"_id":"public/2020/parcelable/index.html","hash":"12ba6e3d754daddec6b624bc62b13cb60e09ae25","modified":1594024149455},{"_id":"public/2020/View 绘制/index.html","hash":"8dae3723d843b641c8fd2e43022eee5faa2bf292","modified":1594024149455},{"_id":"public/2020/as项目中的gradle/index.html","hash":"cedc0feef428da0bfbcc63a0b14f319ce08dcb01","modified":1594024149455},{"_id":"public/2020/volley/index.html","hash":"66c8c2f36547d39f8c925b3e8eba26e9c415991c","modified":1594024149455},{"_id":"public/2020/三种动画，插值器，估值器/index.html","hash":"2622501ec90fa759160b9ea46cfce2a8513c3694","modified":1594024149455},{"_id":"public/archives/index.html","hash":"74a68caed49d093bd67036e892c0b3019212a420","modified":1594024149455},{"_id":"public/archives/2020/index.html","hash":"74a68caed49d093bd67036e892c0b3019212a420","modified":1594024149455},{"_id":"public/archives/2020/04/index.html","hash":"f98d14d80d37cfa5ee0ee8db829b451eb178a4ba","modified":1594024149455},{"_id":"public/archives/2020/05/index.html","hash":"94a1732c5f297c9399322a65e866a8081d3e41e3","modified":1594024149455},{"_id":"public/archives/2020/06/index.html","hash":"092bf9225d3142cad0d01870a42aa9e5b021e340","modified":1594024149455},{"_id":"public/archives/2020/07/index.html","hash":"9e84d0bc5464bd8f6e67ea18be87c658fbe51677","modified":1594024149455},{"_id":"public/index.html","hash":"bce34cd8fbd52292b23b145133fe289e4f24c642","modified":1594024149455},{"_id":"public/img/alipay.svg","hash":"3d94d2f9b09e352802628c9225578e1086f5fef3","modified":1594024149455},{"_id":"public/img/github.svg","hash":"277798d16cb6106e45ef74f6b9972011fa43401b","modified":1594024149455},{"_id":"public/img/like.svg","hash":"e6e4bd1af076be9358316cac89efdc22ef4a5064","modified":1594024149455},{"_id":"public/img/paypal.svg","hash":"09786c983a10bc570dcd05b87cec601e9d01eb00","modified":1594024149455},{"_id":"public/img/wechat.svg","hash":"19c1f68ec8c0b8e9f7855e7a6e78077f70a1aedc","modified":1594024149455},{"_id":"public/img/bitcoin.svg","hash":"590b6b6462896168d08b30dfe2de5f08950d5553","modified":1594024149455},{"_id":"public/images/LayoutInflater.png","hash":"2bcb3cb9dc7d17749cce108ba31ae7daa20f151b","modified":1594024149455},{"_id":"public/css/copycode.css","hash":"e2463b8dacf629e180a1b6cd80667ca8044292eb","modified":1594024149455},{"_id":"public/css/copyright.css","hash":"a418da11a88d1feb14500df42ed97a64da6a7611","modified":1594024149455},{"_id":"public/css/donate.css","hash":"95b2fd65042afecc0b5530847c369bcc11d74bd0","modified":1594024149455},{"_id":"public/css/search.css","hash":"9406e138d7bb6a9ef4a067eba1dafa627519c8a7","modified":1594024149455},{"_id":"public/js/codeblock-resizer.js","hash":"5d0b786d60bf225d9eabcc9cece2719ff4d9b6cd","modified":1594024149455},{"_id":"public/js/copyright.js","hash":"7b1bd775ea22abf33d57f78628f436bf656e439a","modified":1594024149455},{"_id":"public/js/donate.js","hash":"bdddd8d9847462d020f7a511e7e12c046223195d","modified":1594024149455},{"_id":"public/js/love.js","hash":"5cf89f622bf891cf1986845eb92eadef6f358eb7","modified":1594024149455},{"_id":"public/js/share.js","hash":"a2f9de374523dc7f2ddb90ed5f24b668c20d9272","modified":1594024149455},{"_id":"public/js/copycode.js","hash":"fde1f153bab1f00ae8930668094c00aa9ff3c7a3","modified":1594024149455},{"_id":"public/js/fancybox.js","hash":"13c4781570339f4fba76a3d7f202e442817dd605","modified":1594024149455},{"_id":"public/js/search.js","hash":"0c0630e2ef213701d393b041f10572e951a27985","modified":1594024149455},{"_id":"public/js/totop.js","hash":"7dbf8fcf582a4fb6eb9b2c60d6de9f9c2091ec4c","modified":1594024149455},{"_id":"public/js/smartresize.js","hash":"3ef157fd877167e3290f42c67a624ea375a46c24","modified":1594024149455},{"_id":"public/video/SwaggerFormat.mp4","hash":"86cf4781bd6531c78eb342cf6472e65b2706a6e8","modified":1594024149455},{"_id":"public/images/红黑树.png","hash":"dcb969c8a373947c17c9e3d89f7a0b627dd52e61","modified":1594024149455},{"_id":"public/css/dark.css","hash":"0faf42a84e243032b736c5f06ddbb95ac69e779c","modified":1594024149455},{"_id":"public/video/YapiFormat.mp4","hash":"9dd816ec78a3350c7fe1e2cd0190806ebeaa9d66","modified":1594024149455},{"_id":"public/images/gradle.png","hash":"a62f80be51a89926566ab1fcc24a53cd3751ee5a","modified":1594024149455},{"_id":"public/css/style.css","hash":"bac940ea57aadde4bb4694a59ba992d7ca0c4aca","modified":1594024149455},{"_id":"public/images/YapiFormat.gif","hash":"579a904a5395296f82d6e79e5def034a29841519","modified":1594024149455},{"_id":"public/images/SwaggerFormat.gif","hash":"cf4bbba016d375b0a390c7b7ed6bdf4b949f3883","modified":1594024149455},{"_id":"public/images/volley.png","hash":"908cea454281f52eaeb27a8df4c3bde6f32d1415","modified":1594024149455}],"Category":[],"Data":[],"Page":[],"Post":[{"_content":"","source":"_posts/日志.md","raw":"","slug":"日志","published":1,"date":"2020-05-07T03:11:55.983Z","updated":"2020-05-07T03:12:14.014Z","title":"日志","comments":1,"layout":"post","photos":[],"link":"","_id":"ckca8tm210000qsfeav1fbmrm","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"\n### setContentView\n\ngetDelegate\n\n->AppCompatDelegate.Create\n\n->AppCompatDelegateImplV9.setContentView\n\n->ensureSubDecor\n\n->createSubDecor\n\n(->requestWindowFeature\n\n->mWindow.getDecorView();// 就是创建DecorView\n\n->subDecor inflate\n\n-> mWindow.setContentView(subDecor);)\n\nsetContentView的过程就是通过PhoneWindow创建DecorView，然后创建SubDecor，最终将传递进来的布局add进来。\n\n\n\n### LayoutInflater\n\nLayoutInflater.inflate()\n\n->Xml.asAttributeSet(XmlPullParser  parser)\n\n->首先进行View的合理性校验，include、merge等标签\n\n->createViewFromTag\n\n(->final TypedArray ta = context.obtainStyledAttributes(attrs, ATTRS_THEME);\n\n->Factory.onCreateView || onCreateView\n\n(->clazz.getConstructor //反射获取这个View的构造器\n\n->constructor.newInstance(args)))\n\n->generateLayoutParams//根据当前标签的参数生成LayoutParams\n\n->rInflateChildren\n\n-> root.addView\n\n\n### LayoutInflater Factory \n\nAppCompatActivity .onCreate\n\n->delegate.installViewFactory\n\n->AppCompatDelegateImpl.createView\n\n->AppCompatViewInflater.createView\n\n->switch (name)  createView\n\n![(类图)](/images/LayoutInflater.png)\n\n参考：https://cloud.tencent.com/developer/user/2898788","source":"_posts/Activity.md","raw":"\n### setContentView\n\ngetDelegate\n\n->AppCompatDelegate.Create\n\n->AppCompatDelegateImplV9.setContentView\n\n->ensureSubDecor\n\n->createSubDecor\n\n(->requestWindowFeature\n\n->mWindow.getDecorView();// 就是创建DecorView\n\n->subDecor inflate\n\n-> mWindow.setContentView(subDecor);)\n\nsetContentView的过程就是通过PhoneWindow创建DecorView，然后创建SubDecor，最终将传递进来的布局add进来。\n\n\n\n### LayoutInflater\n\nLayoutInflater.inflate()\n\n->Xml.asAttributeSet(XmlPullParser  parser)\n\n->首先进行View的合理性校验，include、merge等标签\n\n->createViewFromTag\n\n(->final TypedArray ta = context.obtainStyledAttributes(attrs, ATTRS_THEME);\n\n->Factory.onCreateView || onCreateView\n\n(->clazz.getConstructor //反射获取这个View的构造器\n\n->constructor.newInstance(args)))\n\n->generateLayoutParams//根据当前标签的参数生成LayoutParams\n\n->rInflateChildren\n\n-> root.addView\n\n\n### LayoutInflater Factory \n\nAppCompatActivity .onCreate\n\n->delegate.installViewFactory\n\n->AppCompatDelegateImpl.createView\n\n->AppCompatViewInflater.createView\n\n->switch (name)  createView\n\n![(类图)](/images/LayoutInflater.png)\n\n参考：https://cloud.tencent.com/developer/user/2898788","slug":"Activity","published":1,"date":"2020-06-04T09:09:41.646Z","updated":"2020-06-06T09:25:21.843Z","title":"Activity","comments":1,"layout":"post","photos":[],"link":"","_id":"ckca8tm2e0001qsfeh95b3e2j","content":"<h3 id=\"setContentView\"><a href=\"#setContentView\" class=\"headerlink\" title=\"setContentView\"></a>setContentView</h3><p>getDelegate</p>\n<p>-&gt;AppCompatDelegate.Create</p>\n<p>-&gt;AppCompatDelegateImplV9.setContentView</p>\n<p>-&gt;ensureSubDecor</p>\n<p>-&gt;createSubDecor</p>\n<p>(-&gt;requestWindowFeature</p>\n<p>-&gt;mWindow.getDecorView();// 就是创建DecorView</p>\n<p>-&gt;subDecor inflate</p>\n<p>-&gt; mWindow.setContentView(subDecor);)</p>\n<p>setContentView的过程就是通过PhoneWindow创建DecorView，然后创建SubDecor，最终将传递进来的布局add进来。</p>\n<h3 id=\"LayoutInflater\"><a href=\"#LayoutInflater\" class=\"headerlink\" title=\"LayoutInflater\"></a>LayoutInflater</h3><p>LayoutInflater.inflate()</p>\n<p>-&gt;Xml.asAttributeSet(XmlPullParser  parser)</p>\n<p>-&gt;首先进行View的合理性校验，include、merge等标签</p>\n<p>-&gt;createViewFromTag</p>\n<p>(-&gt;final TypedArray ta = context.obtainStyledAttributes(attrs, ATTRS_THEME);</p>\n<p>-&gt;Factory.onCreateView || onCreateView</p>\n<p>(-&gt;clazz.getConstructor //反射获取这个View的构造器</p>\n<p>-&gt;constructor.newInstance(args)))</p>\n<p>-&gt;generateLayoutParams//根据当前标签的参数生成LayoutParams</p>\n<p>-&gt;rInflateChildren</p>\n<p>-&gt; root.addView</p>\n<h3 id=\"LayoutInflater-Factory\"><a href=\"#LayoutInflater-Factory\" class=\"headerlink\" title=\"LayoutInflater Factory\"></a>LayoutInflater Factory</h3><p>AppCompatActivity .onCreate</p>\n<p>-&gt;delegate.installViewFactory</p>\n<p>-&gt;AppCompatDelegateImpl.createView</p>\n<p>-&gt;AppCompatViewInflater.createView</p>\n<p>-&gt;switch (name)  createView</p>\n<p><img src=\"/images/LayoutInflater.png\" alt=\"(类图)\"></p>\n<p>参考：<a href=\"https://cloud.tencent.com/developer/user/2898788\" target=\"_blank\" rel=\"noopener\">https://cloud.tencent.com/developer/user/2898788</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"setContentView\"><a href=\"#setContentView\" class=\"headerlink\" title=\"setContentView\"></a>setContentView</h3><p>getDelegate</p>\n<p>-&gt;AppCompatDelegate.Create</p>\n<p>-&gt;AppCompatDelegateImplV9.setContentView</p>\n<p>-&gt;ensureSubDecor</p>\n<p>-&gt;createSubDecor</p>\n<p>(-&gt;requestWindowFeature</p>\n<p>-&gt;mWindow.getDecorView();// 就是创建DecorView</p>\n<p>-&gt;subDecor inflate</p>\n<p>-&gt; mWindow.setContentView(subDecor);)</p>\n<p>setContentView的过程就是通过PhoneWindow创建DecorView，然后创建SubDecor，最终将传递进来的布局add进来。</p>\n<h3 id=\"LayoutInflater\"><a href=\"#LayoutInflater\" class=\"headerlink\" title=\"LayoutInflater\"></a>LayoutInflater</h3><p>LayoutInflater.inflate()</p>\n<p>-&gt;Xml.asAttributeSet(XmlPullParser  parser)</p>\n<p>-&gt;首先进行View的合理性校验，include、merge等标签</p>\n<p>-&gt;createViewFromTag</p>\n<p>(-&gt;final TypedArray ta = context.obtainStyledAttributes(attrs, ATTRS_THEME);</p>\n<p>-&gt;Factory.onCreateView || onCreateView</p>\n<p>(-&gt;clazz.getConstructor //反射获取这个View的构造器</p>\n<p>-&gt;constructor.newInstance(args)))</p>\n<p>-&gt;generateLayoutParams//根据当前标签的参数生成LayoutParams</p>\n<p>-&gt;rInflateChildren</p>\n<p>-&gt; root.addView</p>\n<h3 id=\"LayoutInflater-Factory\"><a href=\"#LayoutInflater-Factory\" class=\"headerlink\" title=\"LayoutInflater Factory\"></a>LayoutInflater Factory</h3><p>AppCompatActivity .onCreate</p>\n<p>-&gt;delegate.installViewFactory</p>\n<p>-&gt;AppCompatDelegateImpl.createView</p>\n<p>-&gt;AppCompatViewInflater.createView</p>\n<p>-&gt;switch (name)  createView</p>\n<p><img src=\"/images/LayoutInflater.png\" alt=\"(类图)\"></p>\n<p>参考：<a href=\"https://cloud.tencent.com/developer/user/2898788\" target=\"_blank\" rel=\"noopener\">https://cloud.tencent.com/developer/user/2898788</a></p>\n"},{"_content":"### Swagger Format插件\n\n事情是这样的。\n\n之前一直和C端后台对接，用的是Yapi来管理接口文档。我们拿到gson后用GsonFormat转换成实体类，yapi上工整的表格随时查阅字段含义，重要的自己补上注释。突然有天，对接B端的业务了。业务复杂程度升了一级，自己补充注释不那么愉快了，Swagger UI拿到手的时候，发现这生成的Model和实体类格式好像呀，稍稍转换下就可以直接用了！\n\n#### 效果：\n\n<img src=\"/images/SwaggerFormat.gif\" alt=\"SwaggerFormat\" style=\"zoom:35%;\" />\n\n<img src=\"/images/YapiFormat.gif\" alt=\"YapiFormat\" style=\"zoom:35%;\" />\n\n#### 源码：[SwaggerFormat](https://github.com/aiyayin/SwaggerFormat)\n\n#### 装IDEA，和插件开发的基本教程。\n\n[官网链接](https://www.jetbrains.org/intellij/sdk/docs/basics/basics.html)\n\n这位大佬的注释很清楚！：[插件开发（一）一个简单的表单demo](https://exceting.github.io/2019/12/13/IDEA插件开发（一）一个简单的表单demo/)\n\n这位大佬有完整的教程：[IntelliJ IDEA插件开发指南(一)](https://blog.csdn.net/ExcellentYuXiao/article/details/80273109)\n\n#### 看GsonFormat的源码学习。\n\n源码链接：https://github.com/zzz40500/GsonFormat\n\n这位大佬有对GsonFormat源码分析和二改：[GsonFormat源码分析和二改](https://juejin.im/post/5becde6af265da61524cf62f#heading-8)\n\n### 记录期间遇到的问题：\n\n一直下载idea： [build.gradle里写死version](https://github.com/JetBrains/gradle-intellij-plugin/issues/323)\n\n找不到PsiClass：[build.gradle里引入java插件](https://www.jetbrains.org/intellij/sdk/docs/basics/plugin_structure/plugin_dependencies.html)\n\n生成的包引入android  studio的时候报\" plugin 'XXX' is incompatible with this installation\"：\n\n查看你studio的版本，降低plugin.xml中since-build到studio的版本，在build.gradle的intellij中加入updateSinceUntilBuild false [配置插件](https://kana112233.github.io/intellij-sdk-docs-cn/tutorials/build_system/deployment.html)","source":"_posts/IDEA Plugin.md","raw":"### Swagger Format插件\n\n事情是这样的。\n\n之前一直和C端后台对接，用的是Yapi来管理接口文档。我们拿到gson后用GsonFormat转换成实体类，yapi上工整的表格随时查阅字段含义，重要的自己补上注释。突然有天，对接B端的业务了。业务复杂程度升了一级，自己补充注释不那么愉快了，Swagger UI拿到手的时候，发现这生成的Model和实体类格式好像呀，稍稍转换下就可以直接用了！\n\n#### 效果：\n\n<img src=\"/images/SwaggerFormat.gif\" alt=\"SwaggerFormat\" style=\"zoom:35%;\" />\n\n<img src=\"/images/YapiFormat.gif\" alt=\"YapiFormat\" style=\"zoom:35%;\" />\n\n#### 源码：[SwaggerFormat](https://github.com/aiyayin/SwaggerFormat)\n\n#### 装IDEA，和插件开发的基本教程。\n\n[官网链接](https://www.jetbrains.org/intellij/sdk/docs/basics/basics.html)\n\n这位大佬的注释很清楚！：[插件开发（一）一个简单的表单demo](https://exceting.github.io/2019/12/13/IDEA插件开发（一）一个简单的表单demo/)\n\n这位大佬有完整的教程：[IntelliJ IDEA插件开发指南(一)](https://blog.csdn.net/ExcellentYuXiao/article/details/80273109)\n\n#### 看GsonFormat的源码学习。\n\n源码链接：https://github.com/zzz40500/GsonFormat\n\n这位大佬有对GsonFormat源码分析和二改：[GsonFormat源码分析和二改](https://juejin.im/post/5becde6af265da61524cf62f#heading-8)\n\n### 记录期间遇到的问题：\n\n一直下载idea： [build.gradle里写死version](https://github.com/JetBrains/gradle-intellij-plugin/issues/323)\n\n找不到PsiClass：[build.gradle里引入java插件](https://www.jetbrains.org/intellij/sdk/docs/basics/plugin_structure/plugin_dependencies.html)\n\n生成的包引入android  studio的时候报\" plugin 'XXX' is incompatible with this installation\"：\n\n查看你studio的版本，降低plugin.xml中since-build到studio的版本，在build.gradle的intellij中加入updateSinceUntilBuild false [配置插件](https://kana112233.github.io/intellij-sdk-docs-cn/tutorials/build_system/deployment.html)","slug":"IDEA Plugin","published":1,"date":"2020-07-03T02:19:11.999Z","updated":"2020-07-06T08:28:09.621Z","title":"IDEA Plugin","comments":1,"layout":"post","photos":[],"link":"","_id":"ckca8tm2g0002qsfe5cw2ajd2","content":"<h3 id=\"Swagger-Format插件\"><a href=\"#Swagger-Format插件\" class=\"headerlink\" title=\"Swagger Format插件\"></a>Swagger Format插件</h3><p>事情是这样的。</p>\n<p>之前一直和C端后台对接，用的是Yapi来管理接口文档。我们拿到gson后用GsonFormat转换成实体类，yapi上工整的表格随时查阅字段含义，重要的自己补上注释。突然有天，对接B端的业务了。业务复杂程度升了一级，自己补充注释不那么愉快了，Swagger UI拿到手的时候，发现这生成的Model和实体类格式好像呀，稍稍转换下就可以直接用了！</p>\n<h4 id=\"效果：\"><a href=\"#效果：\" class=\"headerlink\" title=\"效果：\"></a>效果：</h4><img src=\"/images/SwaggerFormat.gif\" alt=\"SwaggerFormat\" style=\"zoom:35%;\" />\n\n<img src=\"/images/YapiFormat.gif\" alt=\"YapiFormat\" style=\"zoom:35%;\" />\n\n<h4 id=\"源码：SwaggerFormat\"><a href=\"#源码：SwaggerFormat\" class=\"headerlink\" title=\"源码：SwaggerFormat\"></a>源码：<a href=\"https://github.com/aiyayin/SwaggerFormat\" target=\"_blank\" rel=\"noopener\">SwaggerFormat</a></h4><h4 id=\"装IDEA，和插件开发的基本教程。\"><a href=\"#装IDEA，和插件开发的基本教程。\" class=\"headerlink\" title=\"装IDEA，和插件开发的基本教程。\"></a>装IDEA，和插件开发的基本教程。</h4><p><a href=\"https://www.jetbrains.org/intellij/sdk/docs/basics/basics.html\" target=\"_blank\" rel=\"noopener\">官网链接</a></p>\n<p>这位大佬的注释很清楚！：<a href=\"https://exceting.github.io/2019/12/13/IDEA插件开发（一）一个简单的表单demo/\" target=\"_blank\" rel=\"noopener\">插件开发（一）一个简单的表单demo</a></p>\n<p>这位大佬有完整的教程：<a href=\"https://blog.csdn.net/ExcellentYuXiao/article/details/80273109\" target=\"_blank\" rel=\"noopener\">IntelliJ IDEA插件开发指南(一)</a></p>\n<h4 id=\"看GsonFormat的源码学习。\"><a href=\"#看GsonFormat的源码学习。\" class=\"headerlink\" title=\"看GsonFormat的源码学习。\"></a>看GsonFormat的源码学习。</h4><p>源码链接：<a href=\"https://github.com/zzz40500/GsonFormat\" target=\"_blank\" rel=\"noopener\">https://github.com/zzz40500/GsonFormat</a></p>\n<p>这位大佬有对GsonFormat源码分析和二改：<a href=\"https://juejin.im/post/5becde6af265da61524cf62f#heading-8\" target=\"_blank\" rel=\"noopener\">GsonFormat源码分析和二改</a></p>\n<h3 id=\"记录期间遇到的问题：\"><a href=\"#记录期间遇到的问题：\" class=\"headerlink\" title=\"记录期间遇到的问题：\"></a>记录期间遇到的问题：</h3><p>一直下载idea： <a href=\"https://github.com/JetBrains/gradle-intellij-plugin/issues/323\" target=\"_blank\" rel=\"noopener\">build.gradle里写死version</a></p>\n<p>找不到PsiClass：<a href=\"https://www.jetbrains.org/intellij/sdk/docs/basics/plugin_structure/plugin_dependencies.html\" target=\"_blank\" rel=\"noopener\">build.gradle里引入java插件</a></p>\n<p>生成的包引入android  studio的时候报” plugin ‘XXX’ is incompatible with this installation”：</p>\n<p>查看你studio的版本，降低plugin.xml中since-build到studio的版本，在build.gradle的intellij中加入updateSinceUntilBuild false <a href=\"https://kana112233.github.io/intellij-sdk-docs-cn/tutorials/build_system/deployment.html\" target=\"_blank\" rel=\"noopener\">配置插件</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Swagger-Format插件\"><a href=\"#Swagger-Format插件\" class=\"headerlink\" title=\"Swagger Format插件\"></a>Swagger Format插件</h3><p>事情是这样的。</p>\n<p>之前一直和C端后台对接，用的是Yapi来管理接口文档。我们拿到gson后用GsonFormat转换成实体类，yapi上工整的表格随时查阅字段含义，重要的自己补上注释。突然有天，对接B端的业务了。业务复杂程度升了一级，自己补充注释不那么愉快了，Swagger UI拿到手的时候，发现这生成的Model和实体类格式好像呀，稍稍转换下就可以直接用了！</p>\n<h4 id=\"效果：\"><a href=\"#效果：\" class=\"headerlink\" title=\"效果：\"></a>效果：</h4><img src=\"/images/SwaggerFormat.gif\" alt=\"SwaggerFormat\" style=\"zoom:35%;\" />\n\n<img src=\"/images/YapiFormat.gif\" alt=\"YapiFormat\" style=\"zoom:35%;\" />\n\n<h4 id=\"源码：SwaggerFormat\"><a href=\"#源码：SwaggerFormat\" class=\"headerlink\" title=\"源码：SwaggerFormat\"></a>源码：<a href=\"https://github.com/aiyayin/SwaggerFormat\" target=\"_blank\" rel=\"noopener\">SwaggerFormat</a></h4><h4 id=\"装IDEA，和插件开发的基本教程。\"><a href=\"#装IDEA，和插件开发的基本教程。\" class=\"headerlink\" title=\"装IDEA，和插件开发的基本教程。\"></a>装IDEA，和插件开发的基本教程。</h4><p><a href=\"https://www.jetbrains.org/intellij/sdk/docs/basics/basics.html\" target=\"_blank\" rel=\"noopener\">官网链接</a></p>\n<p>这位大佬的注释很清楚！：<a href=\"https://exceting.github.io/2019/12/13/IDEA插件开发（一）一个简单的表单demo/\" target=\"_blank\" rel=\"noopener\">插件开发（一）一个简单的表单demo</a></p>\n<p>这位大佬有完整的教程：<a href=\"https://blog.csdn.net/ExcellentYuXiao/article/details/80273109\" target=\"_blank\" rel=\"noopener\">IntelliJ IDEA插件开发指南(一)</a></p>\n<h4 id=\"看GsonFormat的源码学习。\"><a href=\"#看GsonFormat的源码学习。\" class=\"headerlink\" title=\"看GsonFormat的源码学习。\"></a>看GsonFormat的源码学习。</h4><p>源码链接：<a href=\"https://github.com/zzz40500/GsonFormat\" target=\"_blank\" rel=\"noopener\">https://github.com/zzz40500/GsonFormat</a></p>\n<p>这位大佬有对GsonFormat源码分析和二改：<a href=\"https://juejin.im/post/5becde6af265da61524cf62f#heading-8\" target=\"_blank\" rel=\"noopener\">GsonFormat源码分析和二改</a></p>\n<h3 id=\"记录期间遇到的问题：\"><a href=\"#记录期间遇到的问题：\" class=\"headerlink\" title=\"记录期间遇到的问题：\"></a>记录期间遇到的问题：</h3><p>一直下载idea： <a href=\"https://github.com/JetBrains/gradle-intellij-plugin/issues/323\" target=\"_blank\" rel=\"noopener\">build.gradle里写死version</a></p>\n<p>找不到PsiClass：<a href=\"https://www.jetbrains.org/intellij/sdk/docs/basics/plugin_structure/plugin_dependencies.html\" target=\"_blank\" rel=\"noopener\">build.gradle里引入java插件</a></p>\n<p>生成的包引入android  studio的时候报” plugin ‘XXX’ is incompatible with this installation”：</p>\n<p>查看你studio的版本，降低plugin.xml中since-build到studio的版本，在build.gradle的intellij中加入updateSinceUntilBuild false <a href=\"https://kana112233.github.io/intellij-sdk-docs-cn/tutorials/build_system/deployment.html\" target=\"_blank\" rel=\"noopener\">配置插件</a></p>\n"},{"_content":"\n![mind图][/images/gradle.png]\n\n","source":"_posts/as项目中的gradle.md","raw":"\n![mind图][/images/gradle.png]\n\n","slug":"as项目中的gradle","published":1,"date":"2020-04-17T09:39:17.832Z","updated":"2020-04-21T06:08:25.411Z","title":"as项目中的gradle","comments":1,"layout":"post","photos":[],"link":"","_id":"ckca8tm2g0003qsfe826sbgw4","content":"<p>![mind图][/images/gradle.png]</p>\n","site":{"data":{}},"excerpt":"","more":"<p>![mind图][/images/gradle.png]</p>\n"},{"_content":"View 绘制\n\n过度绘制\n\n硬件加速\n\nhttps://tech.meituan.com/2017/01/19/hardware-accelerate.html\n\nCPU 中央处理器 控制器复杂，ALU较少，逻辑运算\n\nGPU 图像处理器 控制器简单，大量ALU，数学运算\n\nDisplayList：基本绘制元素，绘制命令缓存区\n\nhttps://blog.csdn.net/luoshengyang/article/details/45943255\n\nRenderNode\n\ninvalidate\n\n脏区\n\n不透明view\n\nclipChildren\n\n\n\nonMeasure: 自顶向下，每个视图在递归时往下推送尺寸规格。\n\n ->onLayouet：自动向下\n\n->onDraw\n\n\n\nMatrix ：本质上是一个矩阵，用于坐标转换映射。可以缩放，平移，错切，旋转。对矩阵进行操作。\n\nPathMeasure：Path测量工具  https://www.jianshu.com/p/82afb9c2e959","source":"_posts/View 绘制.md","raw":"View 绘制\n\n过度绘制\n\n硬件加速\n\nhttps://tech.meituan.com/2017/01/19/hardware-accelerate.html\n\nCPU 中央处理器 控制器复杂，ALU较少，逻辑运算\n\nGPU 图像处理器 控制器简单，大量ALU，数学运算\n\nDisplayList：基本绘制元素，绘制命令缓存区\n\nhttps://blog.csdn.net/luoshengyang/article/details/45943255\n\nRenderNode\n\ninvalidate\n\n脏区\n\n不透明view\n\nclipChildren\n\n\n\nonMeasure: 自顶向下，每个视图在递归时往下推送尺寸规格。\n\n ->onLayouet：自动向下\n\n->onDraw\n\n\n\nMatrix ：本质上是一个矩阵，用于坐标转换映射。可以缩放，平移，错切，旋转。对矩阵进行操作。\n\nPathMeasure：Path测量工具  https://www.jianshu.com/p/82afb9c2e959","slug":"View 绘制","published":1,"date":"2020-04-21T06:24:21.633Z","updated":"2020-04-30T09:30:39.808Z","title":"View 绘制","comments":1,"layout":"post","photos":[],"link":"","_id":"ckca8tm2h0004qsfe8k8m5uq3","content":"<p>View 绘制</p>\n<p>过度绘制</p>\n<p>硬件加速</p>\n<p><a href=\"https://tech.meituan.com/2017/01/19/hardware-accelerate.html\" target=\"_blank\" rel=\"noopener\">https://tech.meituan.com/2017/01/19/hardware-accelerate.html</a></p>\n<p>CPU 中央处理器 控制器复杂，ALU较少，逻辑运算</p>\n<p>GPU 图像处理器 控制器简单，大量ALU，数学运算</p>\n<p>DisplayList：基本绘制元素，绘制命令缓存区</p>\n<p><a href=\"https://blog.csdn.net/luoshengyang/article/details/45943255\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/luoshengyang/article/details/45943255</a></p>\n<p>RenderNode</p>\n<p>invalidate</p>\n<p>脏区</p>\n<p>不透明view</p>\n<p>clipChildren</p>\n<p>onMeasure: 自顶向下，每个视图在递归时往下推送尺寸规格。</p>\n<p> -&gt;onLayouet：自动向下</p>\n<p>-&gt;onDraw</p>\n<p>Matrix ：本质上是一个矩阵，用于坐标转换映射。可以缩放，平移，错切，旋转。对矩阵进行操作。</p>\n<p>PathMeasure：Path测量工具  <a href=\"https://www.jianshu.com/p/82afb9c2e959\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/82afb9c2e959</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>View 绘制</p>\n<p>过度绘制</p>\n<p>硬件加速</p>\n<p><a href=\"https://tech.meituan.com/2017/01/19/hardware-accelerate.html\" target=\"_blank\" rel=\"noopener\">https://tech.meituan.com/2017/01/19/hardware-accelerate.html</a></p>\n<p>CPU 中央处理器 控制器复杂，ALU较少，逻辑运算</p>\n<p>GPU 图像处理器 控制器简单，大量ALU，数学运算</p>\n<p>DisplayList：基本绘制元素，绘制命令缓存区</p>\n<p><a href=\"https://blog.csdn.net/luoshengyang/article/details/45943255\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/luoshengyang/article/details/45943255</a></p>\n<p>RenderNode</p>\n<p>invalidate</p>\n<p>脏区</p>\n<p>不透明view</p>\n<p>clipChildren</p>\n<p>onMeasure: 自顶向下，每个视图在递归时往下推送尺寸规格。</p>\n<p> -&gt;onLayouet：自动向下</p>\n<p>-&gt;onDraw</p>\n<p>Matrix ：本质上是一个矩阵，用于坐标转换映射。可以缩放，平移，错切，旋转。对矩阵进行操作。</p>\n<p>PathMeasure：Path测量工具  <a href=\"https://www.jianshu.com/p/82afb9c2e959\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/82afb9c2e959</a></p>\n"},{"_content":"Parcelable\n\n序列化:将对象装华为可以传输的二进制流（二进制序列的过程）\n\nParcel：提供了一套机制，可以将序列化之后的数据写入到一个共享内存中，其他进程通过Parcel可以从这块共享内存中读出字节（Binder 机制），并反序列化成对象,下图是这个过程的模型。。","source":"_posts/parcelable.md","raw":"Parcelable\n\n序列化:将对象装华为可以传输的二进制流（二进制序列的过程）\n\nParcel：提供了一套机制，可以将序列化之后的数据写入到一个共享内存中，其他进程通过Parcel可以从这块共享内存中读出字节（Binder 机制），并反序列化成对象,下图是这个过程的模型。。","slug":"parcelable","published":1,"date":"2020-04-22T07:17:35.961Z","updated":"2020-04-22T08:38:57.426Z","title":"parcelable","comments":1,"layout":"post","photos":[],"link":"","_id":"ckca8tm2i0005qsfebcvo0a27","content":"<p>Parcelable</p>\n<p>序列化:将对象装华为可以传输的二进制流（二进制序列的过程）</p>\n<p>Parcel：提供了一套机制，可以将序列化之后的数据写入到一个共享内存中，其他进程通过Parcel可以从这块共享内存中读出字节（Binder 机制），并反序列化成对象,下图是这个过程的模型。。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Parcelable</p>\n<p>序列化:将对象装华为可以传输的二进制流（二进制序列的过程）</p>\n<p>Parcel：提供了一套机制，可以将序列化之后的数据写入到一个共享内存中，其他进程通过Parcel可以从这块共享内存中读出字节（Binder 机制），并反序列化成对象,下图是这个过程的模型。。</p>\n"},{"_content":"#### 逐帧动画\n#### 属性动画 ValueAnimator \n可直接修改任何属性，形成动画\n\n#### 补间动画 ObjectAnimator （平移，旋转，缩放，透明度等）\n确定开始状态和结束状态，中间有系统计算来补充\n\n##### 插值器决定属性值随时间变化的规律；而具体变化属性数值则交给估值器去计算。\n#### 插值器\n根据时间流失的百分比 计算当前属性改变的百分比。(LinearInterpolator 匀速；AccelerateInterpolator 加速)\n\n继承BaseInterpolaor，实现getInterpolation()方法\n\n```java\n   //插值计算的核心方法，定义了插值的映射关系\n    public float getInterpolation(float input) {\n        if (mFactor == 1.0f) {\n            return input * input;\n        } else {\n            return (float)Math.pow(input, mDoubleFactor);\n        }\n    }\n```\n#### 估值器\n根据当前属性改变的百分比来计算改变后的属性值。\n\n继承TypeEvaluator<T>,实现evaluate();\n\n```java\n // 复写evaluate（）\n    // 在evaluate（）里写入对象动画过渡的逻辑\n    @Override\n    public Point evaluate(float fraction, Point startValue, Point endValue) {\n        // 根据fraction来计算当前动画的x和y的值\n        int x = (int) (startValue.x + fraction * (endValue.x - startValue.x));\n        int y = (int) (startValue.y + fraction * (endValue.y - startValue.y));\n        // 将计算后的坐标封装到一个新的Point对象中并返回\n        return new Point(x, y);\n    }\n```\n\n这位大佬讲的很详细： http://gityuan.com/2015/09/05/android-anaimator-3/","source":"_posts/三种动画，插值器，估值器.md","raw":"#### 逐帧动画\n#### 属性动画 ValueAnimator \n可直接修改任何属性，形成动画\n\n#### 补间动画 ObjectAnimator （平移，旋转，缩放，透明度等）\n确定开始状态和结束状态，中间有系统计算来补充\n\n##### 插值器决定属性值随时间变化的规律；而具体变化属性数值则交给估值器去计算。\n#### 插值器\n根据时间流失的百分比 计算当前属性改变的百分比。(LinearInterpolator 匀速；AccelerateInterpolator 加速)\n\n继承BaseInterpolaor，实现getInterpolation()方法\n\n```java\n   //插值计算的核心方法，定义了插值的映射关系\n    public float getInterpolation(float input) {\n        if (mFactor == 1.0f) {\n            return input * input;\n        } else {\n            return (float)Math.pow(input, mDoubleFactor);\n        }\n    }\n```\n#### 估值器\n根据当前属性改变的百分比来计算改变后的属性值。\n\n继承TypeEvaluator<T>,实现evaluate();\n\n```java\n // 复写evaluate（）\n    // 在evaluate（）里写入对象动画过渡的逻辑\n    @Override\n    public Point evaluate(float fraction, Point startValue, Point endValue) {\n        // 根据fraction来计算当前动画的x和y的值\n        int x = (int) (startValue.x + fraction * (endValue.x - startValue.x));\n        int y = (int) (startValue.y + fraction * (endValue.y - startValue.y));\n        // 将计算后的坐标封装到一个新的Point对象中并返回\n        return new Point(x, y);\n    }\n```\n\n这位大佬讲的很详细： http://gityuan.com/2015/09/05/android-anaimator-3/","slug":"三种动画，插值器，估值器","published":1,"date":"2020-04-17T09:32:36.727Z","updated":"2020-04-21T06:07:42.757Z","title":"三种动画，插值器，估值器","comments":1,"layout":"post","photos":[],"link":"","_id":"ckca8tm2i0006qsfe48jleu1f","content":"<h4 id=\"逐帧动画\"><a href=\"#逐帧动画\" class=\"headerlink\" title=\"逐帧动画\"></a>逐帧动画</h4><h4 id=\"属性动画-ValueAnimator\"><a href=\"#属性动画-ValueAnimator\" class=\"headerlink\" title=\"属性动画 ValueAnimator\"></a>属性动画 ValueAnimator</h4><p>可直接修改任何属性，形成动画</p>\n<h4 id=\"补间动画-ObjectAnimator-（平移，旋转，缩放，透明度等）\"><a href=\"#补间动画-ObjectAnimator-（平移，旋转，缩放，透明度等）\" class=\"headerlink\" title=\"补间动画 ObjectAnimator （平移，旋转，缩放，透明度等）\"></a>补间动画 ObjectAnimator （平移，旋转，缩放，透明度等）</h4><p>确定开始状态和结束状态，中间有系统计算来补充</p>\n<h5 id=\"插值器决定属性值随时间变化的规律；而具体变化属性数值则交给估值器去计算。\"><a href=\"#插值器决定属性值随时间变化的规律；而具体变化属性数值则交给估值器去计算。\" class=\"headerlink\" title=\"插值器决定属性值随时间变化的规律；而具体变化属性数值则交给估值器去计算。\"></a>插值器决定属性值随时间变化的规律；而具体变化属性数值则交给估值器去计算。</h5><h4 id=\"插值器\"><a href=\"#插值器\" class=\"headerlink\" title=\"插值器\"></a>插值器</h4><p>根据时间流失的百分比 计算当前属性改变的百分比。(LinearInterpolator 匀速；AccelerateInterpolator 加速)</p>\n<p>继承BaseInterpolaor，实现getInterpolation()方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//插值计算的核心方法，定义了插值的映射关系</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">float</span> <span class=\"title\">getInterpolation</span><span class=\"params\">(<span class=\"keyword\">float</span> input)</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (mFactor == <span class=\"number\">1.0f</span>) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> input * input;</span><br><span class=\"line\">     &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> (<span class=\"keyword\">float</span>)Math.pow(input, mDoubleFactor);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"估值器\"><a href=\"#估值器\" class=\"headerlink\" title=\"估值器\"></a>估值器</h4><p>根据当前属性改变的百分比来计算改变后的属性值。</p>\n<p>继承TypeEvaluator<T>,实现evaluate();</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 复写evaluate（）</span></span><br><span class=\"line\">   <span class=\"comment\">// 在evaluate（）里写入对象动画过渡的逻辑</span></span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> Point <span class=\"title\">evaluate</span><span class=\"params\">(<span class=\"keyword\">float</span> fraction, Point startValue, Point endValue)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"comment\">// 根据fraction来计算当前动画的x和y的值</span></span><br><span class=\"line\">       <span class=\"keyword\">int</span> x = (<span class=\"keyword\">int</span>) (startValue.x + fraction * (endValue.x - startValue.x));</span><br><span class=\"line\">       <span class=\"keyword\">int</span> y = (<span class=\"keyword\">int</span>) (startValue.y + fraction * (endValue.y - startValue.y));</span><br><span class=\"line\">       <span class=\"comment\">// 将计算后的坐标封装到一个新的Point对象中并返回</span></span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Point(x, y);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>这位大佬讲的很详细： <a href=\"http://gityuan.com/2015/09/05/android-anaimator-3/\" target=\"_blank\" rel=\"noopener\">http://gityuan.com/2015/09/05/android-anaimator-3/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"逐帧动画\"><a href=\"#逐帧动画\" class=\"headerlink\" title=\"逐帧动画\"></a>逐帧动画</h4><h4 id=\"属性动画-ValueAnimator\"><a href=\"#属性动画-ValueAnimator\" class=\"headerlink\" title=\"属性动画 ValueAnimator\"></a>属性动画 ValueAnimator</h4><p>可直接修改任何属性，形成动画</p>\n<h4 id=\"补间动画-ObjectAnimator-（平移，旋转，缩放，透明度等）\"><a href=\"#补间动画-ObjectAnimator-（平移，旋转，缩放，透明度等）\" class=\"headerlink\" title=\"补间动画 ObjectAnimator （平移，旋转，缩放，透明度等）\"></a>补间动画 ObjectAnimator （平移，旋转，缩放，透明度等）</h4><p>确定开始状态和结束状态，中间有系统计算来补充</p>\n<h5 id=\"插值器决定属性值随时间变化的规律；而具体变化属性数值则交给估值器去计算。\"><a href=\"#插值器决定属性值随时间变化的规律；而具体变化属性数值则交给估值器去计算。\" class=\"headerlink\" title=\"插值器决定属性值随时间变化的规律；而具体变化属性数值则交给估值器去计算。\"></a>插值器决定属性值随时间变化的规律；而具体变化属性数值则交给估值器去计算。</h5><h4 id=\"插值器\"><a href=\"#插值器\" class=\"headerlink\" title=\"插值器\"></a>插值器</h4><p>根据时间流失的百分比 计算当前属性改变的百分比。(LinearInterpolator 匀速；AccelerateInterpolator 加速)</p>\n<p>继承BaseInterpolaor，实现getInterpolation()方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//插值计算的核心方法，定义了插值的映射关系</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">float</span> <span class=\"title\">getInterpolation</span><span class=\"params\">(<span class=\"keyword\">float</span> input)</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (mFactor == <span class=\"number\">1.0f</span>) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> input * input;</span><br><span class=\"line\">     &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> (<span class=\"keyword\">float</span>)Math.pow(input, mDoubleFactor);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"估值器\"><a href=\"#估值器\" class=\"headerlink\" title=\"估值器\"></a>估值器</h4><p>根据当前属性改变的百分比来计算改变后的属性值。</p>\n<p>继承TypeEvaluator<T>,实现evaluate();</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 复写evaluate（）</span></span><br><span class=\"line\">   <span class=\"comment\">// 在evaluate（）里写入对象动画过渡的逻辑</span></span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> Point <span class=\"title\">evaluate</span><span class=\"params\">(<span class=\"keyword\">float</span> fraction, Point startValue, Point endValue)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"comment\">// 根据fraction来计算当前动画的x和y的值</span></span><br><span class=\"line\">       <span class=\"keyword\">int</span> x = (<span class=\"keyword\">int</span>) (startValue.x + fraction * (endValue.x - startValue.x));</span><br><span class=\"line\">       <span class=\"keyword\">int</span> y = (<span class=\"keyword\">int</span>) (startValue.y + fraction * (endValue.y - startValue.y));</span><br><span class=\"line\">       <span class=\"comment\">// 将计算后的坐标封装到一个新的Point对象中并返回</span></span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Point(x, y);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>这位大佬讲的很详细： <a href=\"http://gityuan.com/2015/09/05/android-anaimator-3/\" target=\"_blank\" rel=\"noopener\">http://gityuan.com/2015/09/05/android-anaimator-3/</a></p>\n"},{"_content":"这是仔细看的第一个框架了，当时用的是mvp+volley。\n\n面向接口编程，可高度自定义呀，实现Cache，可以管理消息队列；实现HttpStack，可以替换底层的网络请求方式。\n\n但是虽然提供了cancle方法，还是存在内存泄漏呀。\n它的cancle()只是修改了Request的mCanceled值，在执行run方法取这个request要执行performRequest之前会看是否是取消的，如果是取消了的，会执行finish，finish时将response的回调置空，不会泄露。在这之后取消，还是可能通过Response.Listener和Response.ErrorListener持有当前activity，导致泄漏。仍记得在Presenter里面网络请求的回调里都要对view进行判空，不然有一大波空指针在等你。\n\n这位大佬也研究过：![Volley与内存泄露](https://www.jianshu.com/p/83fd6efe0703)\n\n附上当时画的不规范的图!\n\n![(类图)](/images/volley.png)","source":"_posts/volley.md","raw":"这是仔细看的第一个框架了，当时用的是mvp+volley。\n\n面向接口编程，可高度自定义呀，实现Cache，可以管理消息队列；实现HttpStack，可以替换底层的网络请求方式。\n\n但是虽然提供了cancle方法，还是存在内存泄漏呀。\n它的cancle()只是修改了Request的mCanceled值，在执行run方法取这个request要执行performRequest之前会看是否是取消的，如果是取消了的，会执行finish，finish时将response的回调置空，不会泄露。在这之后取消，还是可能通过Response.Listener和Response.ErrorListener持有当前activity，导致泄漏。仍记得在Presenter里面网络请求的回调里都要对view进行判空，不然有一大波空指针在等你。\n\n这位大佬也研究过：![Volley与内存泄露](https://www.jianshu.com/p/83fd6efe0703)\n\n附上当时画的不规范的图!\n\n![(类图)](/images/volley.png)","slug":"volley","published":1,"date":"2020-04-17T06:59:49.020Z","updated":"2020-07-06T07:45:11.644Z","title":"volley","comments":1,"layout":"post","photos":[],"link":"","_id":"ckca8tmsk0007qsfegbsm33h2","content":"<p>这是仔细看的第一个框架了，当时用的是mvp+volley。</p>\n<p>面向接口编程，可高度自定义呀，实现Cache，可以管理消息队列；实现HttpStack，可以替换底层的网络请求方式。</p>\n<p>但是虽然提供了cancle方法，还是存在内存泄漏呀。<br>它的cancle()只是修改了Request的mCanceled值，在执行run方法取这个request要执行performRequest之前会看是否是取消的，如果是取消了的，会执行finish，finish时将response的回调置空，不会泄露。在这之后取消，还是可能通过Response.Listener和Response.ErrorListener持有当前activity，导致泄漏。仍记得在Presenter里面网络请求的回调里都要对view进行判空，不然有一大波空指针在等你。</p>\n<p>这位大佬也研究过：<img src=\"https://www.jianshu.com/p/83fd6efe0703\" alt=\"Volley与内存泄露\"></p>\n<p>附上当时画的不规范的图!</p>\n<p><img src=\"/images/volley.png\" alt=\"(类图)\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>这是仔细看的第一个框架了，当时用的是mvp+volley。</p>\n<p>面向接口编程，可高度自定义呀，实现Cache，可以管理消息队列；实现HttpStack，可以替换底层的网络请求方式。</p>\n<p>但是虽然提供了cancle方法，还是存在内存泄漏呀。<br>它的cancle()只是修改了Request的mCanceled值，在执行run方法取这个request要执行performRequest之前会看是否是取消的，如果是取消了的，会执行finish，finish时将response的回调置空，不会泄露。在这之后取消，还是可能通过Response.Listener和Response.ErrorListener持有当前activity，导致泄漏。仍记得在Presenter里面网络请求的回调里都要对view进行判空，不然有一大波空指针在等你。</p>\n<p>这位大佬也研究过：<img src=\"https://www.jianshu.com/p/83fd6efe0703\" alt=\"Volley与内存泄露\"></p>\n<p>附上当时画的不规范的图!</p>\n<p><img src=\"/images/volley.png\" alt=\"(类图)\"></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}